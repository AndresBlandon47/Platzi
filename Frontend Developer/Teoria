HTPP: El protocolo de transferencia de Hipertexto, es el protocolo de comunicación que permite las transferencias de información en la world wide web.

URL: Localizador de recursos uniformes , es la manera en la que agregamos un nombre a un punto de la red.

HTML: Es un lenguaje de marcado usado para decirle a tu navegador cómo estructurar las páginas web que visitas. No es un lenguaje de programación.

CSS: Es un lenguaje que nos permite crear páginas web con un diseño agradable para los usuarios. Tampoco es un lenguaje de programación.

DOM: Document object Model, es una transformación del código HTML del programador, a objetos que son entendibles por el navegador.
 
CSSOM: Es una representación de objetos del CSS, coge los elementos del CSS y los transforma en objetos.

Render Tree: es la unión entre el DOM y el CSSOM para renderizar todo el código de nuestra página web.

BODY: es donde se copia el código que se va ver en el navegador.
 
El proceso que hace el navegador a nivel bajo, es el siguiente:
BYTES -> CHARACTERS -> TOKENS -> NODES -> DOM

Pasos que sigue el navegador para construir las páginas web:
    1.Procesa el HTML para construir el DOM.
    2.Procesa el CSS para construir el CSSOM.
    3.El DOM se une con el CSSOM para crear el Render Tree.
    4.Se aplican los estilos CSS en el Render Tree.
    5.Se ““pintan”” los nodos en la pantalla para que los usuarios vean el contenido de la página web.


Selectores del CSS:
    Universal <-------- *{
                            margin: 0;
                         }

    Tipo <------------- h1{
                            color: red;
                        }

    Clase <------------ .saludo{
                            font-size: 2em;
                        }

    ID <--------------- #id{
                            border-radius:20px;
                        }
                        
Las Pseudo-clases y Pseudo-elementos nos permiten ser aún más específicos con qué elemento o partes de nuestros elementos deben recibir los estilos.     

Modelo de caja, y que propiedades afectan su dimensionamiento:

    _____________________________________________________________
   |   Margin_________________________________________________   |
   |  |   Border___________________________________________   |  |
   |  |  |                                                 |  |  |
   |  |  |   Padding____________________________________   |  |  |
   |  |  |  |___________________________________________|  |  |  |
   |  |  |                                                 |  |  |
   |  |  |_________________________________________________|  |  |
   |  |_______________________________________________________|  |
   |_____________________________________________________________|

Posicionamiento de los elementos
    -Absoluto.
    -Relativo.
    -Flexbox.
    -CSS Grid.

Funciones etiquetas

    <head>: Siempre vamos a encontrar los metadatos del documento que vamos a escribir, incluyendo también enlaces.

    <meta>: Define los metadatos que no pueden ser definidos usando otro elemento HTML, como por ejemplo el tipo de codificación: UTF-8.

    <body>: Es la única etiqueta body que debe aparecer en nuestro documento y representa todo el contenido principal.

    <img>: La utilizamos para añadir imágenes. Normalmente debe ir acompañada de los atributos src (donde se coloca la url o enlace en donde se encuentra nuestra imagen) y alt (por si la imagen no carga, el usuario pueda leer el nombre de lo que se iba a ver. Tambien sirve para las personas ciegas).

    <input>: Es un campo en donde el usuario puede ingresar datos. es usada normalmente en formularios como el de inicio de sesión, registro o el buscador de una aplicación.

    <br>: Con esta etiqueta puedes hacer saltos de línea.

    <hr>: Es muy parecido a <br> pero en este caso representa un quiebre temático entre los párrafos de una sección.

    <header>: Se usa para definir la cabecera de nuestra página en donde usualmente le colocamos un logo, el título de la página o aplicación y a veces en menú con una lista de navegación.

    <nav>: Esta es la etiqueta que usamos para colocar enlaces de navegación.

    <article>: La usamos normalmente para definir contenido que puede vivir independiente al resto del contenido.

    <section>: Colocamos el contenido de las secciones de nuestra página.

    <aside>: El contenido de esta etiqueta no le agrega sentido al resto del contenido de la página, es decir, si se elimina, no afecta. Como por ejemplo la publicidad de nuestro sitio.

    <footer>: Es la parte final de nuestra página en donde normalmente se coloca información que el usuario pueda requerir de nuestro sitio, como por ejemplo, nuestras redes sociales, información de contacto, políticas de privacidad y entre otras.

    <div>: Es el contenedor más común y más usado en HTML pero no tiene un significado especial.

    <button>: Es utilizado para hacer botones. Normalmente va acompañado del evento onClick y de un script que define la acción que se realizará al dar click en el botón.

    <a>: Se utiliza para colocar enlaces. Se acompaña del atributo href en donde se coloca la dirección a la cual queremos dirigir.

    <ol>: Describe una lista ordenada. Los ítems se escriben con la etiqueta <li>. por ejemplo:
        <h1> Equipos de colombia</h1>
        <ol>
            <li>Once Caldas</li>
            <li>Nacional</li>
            <li>Millos</li>
            <li>Pasto</li>
        </ol>
        veríamos lo siguiente:             
        Equipos de Colombia:
            1.Once Caldas
            2.Nacional
            3.Millos
            4.Pasto

    <ul>: Describe una lista desordenada. Los ítems se escriben con la etiqueta <li>. por ejemplo:
        <h1> Equipos de colombia</h1>
        <ol>
            <li>Once Caldas</li>
            <li>Nacional</li>
            <li>Millos</li>
            <li>Pasto</li>
        </ol>
        veríamos lo siguiente: 
        Equipos de Colombia:
            -Once Caldas
            -Nacional
            -Millos
            -Pasto

    <form>: Usado para crear formularios. Van normalmente acompañados de las etiquetas <input>, <label>, <textarea> y entre otras.

Modelo de caja:
    -Contenido
    -Padding
    -Border
    -Margin 

Displays en CSS: Todos los elementos en CSS son cuadrados o rectángulos y aparte de eso, estos elementos tienen un comportamiento que se define a través de la propiedad display. 
Los display más comunes y usados son: block, inline, inline-block, none, table, flex y grid. Veamos de qué se tratan:

    Block: Quiero que pensemos en este display como el flujo que tenemos cada vez que escribimos.Por ejemplo, nosotros escribimos de izquierda a derecha, pero cuando se nos acaba 
    el espacio horizontalmente, seguimos abajo. Este es el flujo de bloque en nuestra escritura (de arriba a abajo) y es exactamente el que obedece display block, lo que quiere 
    decir que los elementos se visualizan uno debajo del otro. Algunos elementos que por defecto tienen este tipo de display son: <div>,<p>,<h1>, <section> y <ul>.

    Inline: quiero que pensemos en este display como la línea base que seguimos para escribir, que en el caso latín es de izquierda a derecha. Por lo tanto todos los elementos 
    en este display se visualizará uno al lado del otro de izquierda a derecha. Algunos elementos por defecto tienen este tipo de display son: <span>, <em> y <b>.

    Inline-Block: Este display es muy similar al display inline, sin embargo este respeta el width y el height que se le asigne a los elementos.

    Flex: Para usar felxbox es indispensable la propiedad display: flex en el elemento padre que por defecto alineará los elementos hijos de izquierda a derecha. también, este
    display suele acompañarce por otras propiedades como justify-content y align-items.

Propiedades o funciones más comunes de CSS:
    WIDTH: Define el ancho de un elemento. Por ejemplo: width: 20px;.
    HEIGHT: Define el alto de un elemento. Por ejemplo: height: 20px;.
    BACKGROUND: Puede definir el color de fondo o la url de fondo de un elemento. Por ejemplo: background: url('puppy.png')
    BORDER: Define el tamaño, estilo y color del borde de un elemento. Por ejemplo: border: 2px solid yellow.
    BORDER-radius: Define qué tan redondeado quiero mi elemento. Por ejemplo: border-radius: 20px.
    FONT-SIZE: Define el tamaño de la fuente. Por ejemplo: font-size: 20px.
    FONT-FAMILY: Define la familia tipográfica de la fuente. Por ejemplo: font-family: 'Roboto', sans-serif.
    OPACITY: Determina la transparencia del elemento. Tiene valores entre 0 y 1, que pueden verse como un porcentaje. Por ejemplo, si quiero que mi elemento se vea con una transparencia del 50%, escribiría: opacity: 0.5.
    OUTLINE:Un esquema es una línea (por defecto, de color azúl) que se dibuja alrededor de los elementos que hace que “se destaquen”. Lo anterior sucede mucho en elementos como los <input> y los <button>.
    BOX-SIZING: Cuando trabajamos con paddings, por ejemplo, veremos que el tamaño de nuestro elemento crece. Es decir, si tengo: width: 20px; height: 20 px; Y luego le agrego un padding de 20px, veré en 
    el navegador que mi div ya no tiene un ancho y un alto de 20px, sino de 40px cada uno. Lo que quiere decir que el padding hizo que creciera mi elemento. Sin embargo, si yo no quiero que el padding 
    afecte los 20px originales, le agrego la propiedad box-sizing para que el tamaño total del elemento incluya el padding también y no se vea afectado por él.

position en CSS: establece cómo van a estar ubicados nuestros elementos en la pantalla, existen 7 valores diferentes:
    RELATIVE: El elemento se coloca en relación a su posición normal.
    ABSOLUTE: Los elementos con esta posición se ubican en relación al elemento relativo más cercano. Aquí podemos hacer uso de las propiedades top, bottom, left y right.
    FIXED: El elemento se ubica en relación con la ventana del navegador y también se ve afectado por las propiedades top, bottom, left y right.
    STICKY: El elemento se posiciona en función de la posición de desplazamiento del usuario. Si lo ubicas a la izquierda, siempre va a estar ahí sin importar cuántas veces se haga scroll en la página.
    STATIC: Los elementos HTML son estáticos por defecto, siguen el flujo normal de la página y no se ven afectados por las propiedades top, bottom, left y right.
    INITIAL: ubica el elemento en la posición que tiene de forma predeterminada.
    INHERITAL: Como su nombre lo indica, este valor hereda esta propiedad de su elemento padre.

Arquitectura de CSS:
    OOCSS: css orientado a objetos. Separa el diseño del contenido, así podemos reutilizar nuestro código
    // ejemplo, en vez de para cada elemento una clase.
    .globalWidth {
        width: 100%;
    }

    BEM: Block Element Modifier. Separa los elementos y los modificadores
    .header {}  // bloque
    .header__button--red {} // block, element, modifier
    
    SMACSS: Scalable and Modular Arquitecture for CSS. Arquitectura de css escalable y modular. PAra eso se realizan cinco pasos
    Dividir nuestro css en componentes base
    Definir Layout. Elementos que se utilizan solo una vez. ej. Footer, Header
    Definir Modulos. Componentes que se usan mas de una vez
    Definir Estados. Estos estados definen los cambios que existen en nuestros elementos/componentes. ej. Cambio de color cuando hacen hover
    Definir Temas. Separar los temas y sus cambios. Si tuvieras temas

    ITCSS: Inverted Triangle CSS. Triangulo Invertido de CSS. Lo que nos indica esta metodologia es poder dividir todos nuestros archivos de css en ciertas partes para que no se mezclen.
    Triangulo invertido, desde arriba hacia abajo:
        Ajustes
        Herramientas
        Generico
        Elementos
        Objetos
        Componentes
        Utilidades
        
    Atomic Design: Basados en la quimica.
        Atomos < Moleculas < Organismos < Templates < Paginas
    
    Anotacion: No es tan buena practica usar !important

links de paginas utiles:
https://css-tricks.com/snippets/css/complete-guide-grid/
https://css-tricks.com/snippets/css/a-guide-to-flexbox/
https://coolors.co/palettes/trending/dc2f02
https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
https://iconos8.es/icons/set/google
https://validator.w3.org/nu/#file
https://htmlreference.io/
https://cssreference.io/